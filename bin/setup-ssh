#!/usr/bin/env bash

if [[ $UID -ne 0 ]]; then
    echo 'Please restart me as root!'
    exit 1
fi

NEW_USER=ada

# Ensure /sbin stuff is in root
export PATH=$PATH:/usr/sbin:/sbin:/usr/local/sbin

function install_pkg() {
	echo "TASK: Install package: $1"
	ARCH_PKG_NAME="$1"
	# If second argument not given, assume pkg name is same for debian systems
	DEBIAN_PKG_NAME=${2:-$1}
	yes | pacman -S "$ARCH_PKG_NAME" || apt install -y "$DEBIAN_PKG_NAME" || {
		echo "WARNING: $1 not installed!"
	}
}

function prompt_yn() {
        while true; do
          read -p "$1 " answer
          case $answer in
           [yY]* ) return 0
                   break;;
           [nN]* ) return 1
                   break;;
           * )     echo "Please enter Y or N.";;
          esac
        done
}

function create_user() {
	user="$1"
	echo "TASK: create user '$user'"
	useradd "$user"
	mkdir /home/"$user" -p
	chown "$user:$user" /home/"$user"/ -R
	for group in sudo wheel; do
		usermod -aG "$group" "$user"
	done
	while true; do
		prompt_yn "Set password for '$user'?" && passwd "$user" || break
	done
}

function install_keys() {
	echo 'TASK: install public key(s)'
	mkdir /home/ada/.ssh/ -p
	curl https://raw.githubusercontent.com/alxpettit/PubKeys/master/ssh/identities/ada/id_rsa.pub > /home/"$NEW_USER"/.ssh/authorized_keys
	prompt_yn  "Add lowsec key?" && {
        	echo "SUBTASK: add lowsec key..."
        	curl https://raw.githubusercontent.com/alxpettit/PubKeys/master/ssh/identities/lowsec/id_rsa.pub >> /home/"$NEW_USER"/.ssh/authorized_keys
	}	
	mkdir /root/.ssh/ -p
        cp -v /home/"$NEW_USER"/.ssh/authorized_keys /root/.ssh/
}

function normalize_perms() {
	echo "TASK: normalize permissions on .ssh files."
	chown ada:ada /home/ada/.ssh/ -R
        chmod 700 /home/ada/.ssh
        chmod 600 /home/ada/.ssh/authorized_keys
        chown root:root /root/.ssh/ -R
        chmod 700 /root/.ssh
        chmod 600 /root/.ssh/authorized_keys
}

function configure_sshd() {
	echo "TASK: configure SSH daemon."
	sed -e 's/#Port 22/Port 22100/g' /etc/ssh/sshd_config -i
	sed -e 's/#PasswordAuthentication no/PasswordAuthentication no/g' /etc/ssh/sshd_config -i
	sed -e 's/#PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config -i

	grep -q -w 'Port 22100' /etc/ssh/sshd_config || {
	    echo -e '\nPort 22100' >> /etc/ssh/sshd_config
	}

	grep -q -w 'PasswordAuthentication no' /etc/ssh/sshd_config || {
	    echo -e '\nPasswordAuthentication no' >> //etc/ssh/sshd_config
	}
}

function start_sshd() {
	systemctl enable ssh || systemctl enable sshd
	# fix bug where if daemon is already started (e.g., by package) it won't stay up and prevent update to daemon settings
	systemctl stop ssh || systemctl stop sshd || echo "No daemons running, confirmed."
	systemctl start ssh || systemctl start sshd
}

install_pkg curl
install_pkg openssh openssh-server
create_user "$NEW_USER"
install_keys
normalize_perms
configure_sshd
start_sshd
